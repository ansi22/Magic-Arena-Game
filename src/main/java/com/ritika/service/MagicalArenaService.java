package com.ritika.service;

import com.ritika.entities.Player;
import com.ritika.entities.Dice;

//  game logic
public class MagicalArenaService {
    private Player player1;
    private Player player2;

    private Dice defendingDice;
    private Dice attackingDice;

    public MagicalArenaService(Player player1, Player player2) {
        this.player1 = player1;
        this.player2 = player2;
        this.attackingDice = new Dice();
        this.defendingDice = new Dice();
    }

    public void PlayGame() {
        // decide which player is attacker and defender
        Player attacker = player1.getHealth() <= player2.getHealth() ? player1 : player2;
        Player defender = attacker == player1 ? player2 : player1;

        // continue playing the match until any of the player's health get reduced to 0
        while(player1.getHealth() > 0 && player2.getHealth() > 0) {
            // random roll values
            int attackerRoll = attackingDice.roll();
            int defenderRoll = defendingDice.roll();

            // damage caused by attacker and defence generated by defender
            int attackerDamage = attacker.getAttack() * attackerRoll;
            int defenderDefence = defender.getStrength() * defenderRoll;

            // extra damage caused by attacker after the defence of defender
            int extraDamage = Math.max(0, attackerDamage - defenderDefence);

            defender.excessDamage(extraDamage);

            // swap the player after each turn
            Player temp = attacker;
            attacker = defender;
            defender = temp;
        }

        // if both the player's health is reduced to zero that means match is 
        //  draw, if bot
        if (player1.getHealth() == 0 && player2.getHealth() == 0) {
            System.out.println("Match Draw!");
        } 

        if (player1.getHealth() == 0) {
            System.out.println("Player 2 wins!");
        } else {
            System.out.println("Player 1 wins!");
        }
    }
}
